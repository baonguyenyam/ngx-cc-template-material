{"version":3,"file":"ngx-cc-template-material.umd.min.js","sources":["~/ngx-cc-template-material/src/types/checkbox.ts","~/ngx-cc-template-material/src/types/multicheckbox.ts","~/ngx-cc-template-material/src/canhcam.error-state-matcher.ts","~/ngx-cc-template-material/src/types/input.ts","~/ngx-cc-template-material/src/types/radio.ts","~/ngx-cc-template-material/src/types/textarea.ts","~/ngx-cc-template-material/src/types/select.ts","~/ngx-cc-template-material/src/wrappers/form-field.ts","~/ngx-cc-template-material/src/ui-material.config.ts","~/ngx-cc-template-material/src/ui-material.module.ts"],"sourcesContent":["import { Component, ViewChild, AfterViewInit } from '@angular/core';\nimport { FieldType } from 'ngx-cc-template-core';\nimport { MatCheckbox } from '@angular/material/checkbox';\nexport class CanhcamFieldCheckbox extends FieldType implements AfterViewInit {\n   matCheckbox: MatCheckbox;\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    if (this.field['__formField__']) {\n      this.field['__formField__']._control.focusMonitor([this.matCheckbox._inputElement.nativeElement]);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'canhcam-field-mat-checkbox',\n  template: `\n    <mat-checkbox [formControl]=\"formControl\" [canhcamAttributes]=\"field\">{{ to.label }}</mat-checkbox>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'matCheckbox': [{ type: ViewChild, args: [MatCheckbox, ] },],\n};\n}\n\nfunction CanhcamFieldCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nCanhcamFieldCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCanhcamFieldCheckbox.ctorParameters;\n/** @type {?} */\nCanhcamFieldCheckbox.propDecorators;\n/** @type {?} */\nCanhcamFieldCheckbox.prototype.matCheckbox;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ViewChildren, AfterViewInit } from '@angular/core';\nimport { FormGroup, FormControl, AbstractControl } from '@angular/forms';\nimport { FieldType, CanhcamFieldConfig } from 'ngx-cc-template-core';\nimport { MatCheckbox } from '@angular/material/checkbox';\nexport class CanhcamFieldMultiCheckbox extends FieldType implements AfterViewInit {\n   matCheckboxes: MatCheckbox[];\n/**\n * @param {?} model\n * @param {?} field\n * @return {?}\n */\nstatic createControl(model: any, field: CanhcamFieldConfig): AbstractControl {\n    let /** @type {?} */ controlGroupConfig = field.templateOptions.options.reduce((previous, option) => {\n      previous[option.key] = new FormControl(model ? model[option.key] : undefined);\n      return previous;\n    }, {});\n\n    return new FormGroup(\n      controlGroupConfig,\n      field.validators ? field.validators.validation : undefined,\n      field.asyncValidators ? field.asyncValidators.validation : undefined,\n    );\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    if (this.field['__formField__']) {\n      this.field['__formField__']._control.focusMonitor(\n        this.matCheckboxes.map(matCheckbox => matCheckbox._inputElement.nativeElement),\n      );\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'canhcam-field-mat-multicheckbox',\n  template: `\n    <ng-container *ngFor=\"let option of to.options\">\n      <mat-checkbox [formControl]=\"formControl.get(option.key)\" [canhcamAttributes]=\"field\">{{ option.value }}</mat-checkbox>\n    </ng-container>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'matCheckboxes': [{ type: ViewChildren, args: [MatCheckbox, ] },],\n};\n}\n\nfunction CanhcamFieldMultiCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nCanhcamFieldMultiCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCanhcamFieldMultiCheckbox.ctorParameters;\n/** @type {?} */\nCanhcamFieldMultiCheckbox.propDecorators;\n/** @type {?} */\nCanhcamFieldMultiCheckbox.prototype.matCheckboxes;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { FormControl, FormGroupDirective, NgForm } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { Field } from 'ngx-cc-template-core';\nexport class CanhcamErrorStateMatcher implements ErrorStateMatcher {\n/**\n * @param {?} field\n */\nconstructor(private field: Field) { }\n/**\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nisErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return this.field && this.field.showError;\n  }\n}\n\nfunction CanhcamErrorStateMatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nCanhcamErrorStateMatcher.prototype.field;\n}\n\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { FieldType } from 'ngx-cc-template-core';\nimport { MatInput } from '@angular/material/input';\nimport { CanhcamErrorStateMatcher } from '../canhcam.error-state-matcher';\nexport class CanhcamFieldInput extends FieldType implements OnInit {\n   matInput: MatInput;\n  errorStateMatcher = new CanhcamErrorStateMatcher(this);\n/**\n * @return {?}\n */\nget type() {\n    return this.to.type || 'text';\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.field['__formField__']) {\n      this.field['__formField__']._control = this.matInput;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'canhcam-field-mat-input',\n  template: `\n    <input matInput\n      [type]=\"type\"\n      [errorStateMatcher]=\"errorStateMatcher\"\n      [formControl]=\"formControl\"\n      [canhcamAttributes]=\"field\">\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'matInput': [{ type: ViewChild, args: [MatInput, ] },],\n};\n}\n\nfunction CanhcamFieldInput_tsickle_Closure_declarations() {\n/** @type {?} */\nCanhcamFieldInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCanhcamFieldInput.ctorParameters;\n/** @type {?} */\nCanhcamFieldInput.propDecorators;\n/** @type {?} */\nCanhcamFieldInput.prototype.matInput;\n/** @type {?} */\nCanhcamFieldInput.prototype.errorStateMatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, AfterViewInit, ViewChildren } from '@angular/core';\nimport { FieldType } from 'ngx-cc-template-core';\nimport { MatRadioButton } from '@angular/material/radio';\nexport class CanhcamFieldRadio extends FieldType implements AfterViewInit {\n   matRadioButtons: MatRadioButton[];\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    if (this.field['__formField__']) {\n      this.field['__formField__']._control.focusMonitor(\n        this.matRadioButtons.map(matRadioButton => matRadioButton._inputElement.nativeElement),\n      );\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'canhcam-field-mat-radio',\n  template: `\n    <mat-radio-group [formControl]=\"formControl\" [canhcamAttributes]=\"field\">\n      <mat-radio-button *ngFor=\"let option of to.options\" [value]=\"option.key\">\n        {{ option.value }}\n      </mat-radio-button>\n    </mat-radio-group>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'matRadioButtons': [{ type: ViewChildren, args: [MatRadioButton, ] },],\n};\n}\n\nfunction CanhcamFieldRadio_tsickle_Closure_declarations() {\n/** @type {?} */\nCanhcamFieldRadio.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCanhcamFieldRadio.ctorParameters;\n/** @type {?} */\nCanhcamFieldRadio.propDecorators;\n/** @type {?} */\nCanhcamFieldRadio.prototype.matRadioButtons;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component } from '@angular/core';\nimport { CanhcamFieldInput } from './input';\nexport class CanhcamFieldTextArea extends CanhcamFieldInput {\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'canhcam-field-mat-textarea',\n  template: `\n    <textarea matInput [name]=\"key\" [formControl]=\"formControl\" [errorStateMatcher]=\"errorStateMatcher\" [cols]=\"to.cols\"\n      [rows]=\"to.rows\" [canhcamAttributes]=\"field\">\n    </textarea>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CanhcamFieldTextArea_tsickle_Closure_declarations() {\n/** @type {?} */\nCanhcamFieldTextArea.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCanhcamFieldTextArea.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { FieldType } from 'ngx-cc-template-core';\nimport { MatSelect } from '@angular/material/select';\nimport { CanhcamErrorStateMatcher } from '../canhcam.error-state-matcher';\nexport class SelectOption {\n  label: string;\n  value?: string;\n  group?: SelectOption[];\n  disabled?: boolean;\n/**\n * @param {?} label\n * @param {?=} value\n * @param {?=} children\n */\nconstructor(label: string, value?: string, children?: SelectOption[]) {\n    this.label = label;\n    this.value = value;\n    this.group = children;\n  }\n}\n\nfunction SelectOption_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectOption.prototype.label;\n/** @type {?} */\nSelectOption.prototype.value;\n/** @type {?} */\nSelectOption.prototype.group;\n/** @type {?} */\nSelectOption.prototype.disabled;\n}\n\nexport class CanhcamFieldSelect extends FieldType implements OnInit {\n   matSelect: MatSelect;\n  errorStateMatcher = new CanhcamErrorStateMatcher(this);\n\n  selectOptions;\n/**\n * @return {?}\n */\nget labelProp(): string { return this.to.labelProp || 'label'; }\n/**\n * @return {?}\n */\nget valueProp(): string { return this.to.valueProp || 'value'; }\n/**\n * @return {?}\n */\nget groupProp(): string { return this.to.groupProp || 'group'; }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.field['__formField__']) {\n      this.field['__formField__']._control = this.matSelect;\n    }\n\n    let /** @type {?} */ options: SelectOption[] = [];\n    this.to.options.map((option: SelectOption) => {\n      if (!option[this.groupProp]) {\n        options.push(option);\n      } else {\n        let /** @type {?} */ filteredOption: SelectOption[] = options.filter((filteredOption) => {\n          return filteredOption.label === option[this.groupProp];\n        });\n        if (filteredOption[0]) {\n          filteredOption[0].group.push({\n            label: option[this.labelProp],\n            value: option[this.valueProp],\n          });\n        }\n        else {\n          options.push({\n            label: option[this.groupProp],\n            group: [{ value: option[this.valueProp], label: option[this.labelProp] }],\n          });\n        }\n      }\n    });\n\n    this.selectOptions = options;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'canhcam-field-mat-select',\n  template: `\n    <mat-select [formControl]=\"formControl\" [canhcamAttributes]=\"field\" [errorStateMatcher]=\"errorStateMatcher\">\n      <ng-container *ngFor=\"let item of selectOptions\">\n        <mat-optgroup *ngIf=\"item.group\" label=\"{{item.label}}\">\n          <mat-option *ngFor=\"let child of item.group\" [value]=\"child.value\" [disabled]=\"item.disabled\">\n            {{ child.label }}\n          </mat-option>\n        </mat-optgroup>\n        <mat-option *ngIf=\"!item.group\" [value]=\"item.value\" [disabled]=\"item.disabled\">{{ item.label }}</mat-option>\n      </ng-container>\n    </mat-select>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'matSelect': [{ type: ViewChild, args: [MatSelect, ] },],\n};\n}\n\nfunction CanhcamFieldSelect_tsickle_Closure_declarations() {\n/** @type {?} */\nCanhcamFieldSelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCanhcamFieldSelect.ctorParameters;\n/** @type {?} */\nCanhcamFieldSelect.propDecorators;\n/** @type {?} */\nCanhcamFieldSelect.prototype.matSelect;\n/** @type {?} */\nCanhcamFieldSelect.prototype.errorStateMatcher;\n/** @type {?} */\nCanhcamFieldSelect.prototype.selectOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ViewChild, ViewContainerRef, OnInit, OnDestroy, NgZone, Renderer2 } from '@angular/core';\nimport { FieldWrapper } from 'ngx-cc-template-core';\nimport { MatFormField } from '@angular/material/form-field';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Subject } from 'rxjs/Subject';\nimport { takeUntil } from 'rxjs/operator/takeUntil';\nexport class CanhcamWrapperFormField extends FieldWrapper implements OnInit, OnDestroy, MatFormFieldControl<any> {\n   fieldComponent: ViewContainerRef;\n   formField: MatFormField;\n\n  placeholder: string;\n  shouldPlaceholderFloat: boolean;\n\n  value: any;\n  empty: boolean;\n  stateChanges = new Subject<void>();\n\n  _errorState = false;\n  focused = false;\n/**\n * @return {?}\n */\nget errorState() { return this.showError; }\n/**\n * @return {?}\n */\nget showError() {\n    const /** @type {?} */ showError = this.options.showError(this);\n    if (showError !== this._errorState) {\n      this._errorState = showError;\n      this.stateChanges.next();\n    }\n\n    return showError;\n  }\n/**\n * @return {?}\n */\nget ngControl() { return /** @type {?} */(( this.formControl as any)); }\n/**\n * @return {?}\n */\nget required() { return this.to.required; }\n/**\n * @return {?}\n */\nget disabled() { return this.to.disabled; }\nprivate destroy$ = new Subject<void>();\n/**\n * @param {?} _focusMonitor\n * @param {?} ngZone\n * @param {?} renderer\n */\nconstructor(private _focusMonitor: FocusMonitor,\nprivate ngZone: NgZone,\nprivate renderer: Renderer2) {\n    super();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this.focused = !!this.field.focus;\n    this.formField._control = this;\n    this.field['__formField__'] = this.formField;\n  }\n/**\n * @param {?=} elements\n * @return {?}\n */\nfocusMonitor(elements = []) {\n    elements.map(element => {\n      takeUntil.call(\n        this._focusMonitor.monitor(element, this.renderer, false),\n        this.destroy$,\n      ).subscribe(focusOrigin => {\n        if (this.focused !== !!focusOrigin) {\n          this.ngZone.run(() => {\n            this.focused = !!focusOrigin;\n            this.stateChanges.next();\n          });\n        }\n      });\n    });\n  }\n/**\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]): void { }\n/**\n * @return {?}\n */\nonContainerClick() { }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    delete this.field['__formField__'];\n    this.stateChanges.complete();\n    this.destroy$.complete();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'canhcam-wrapper-mat-form-field',\n  template: `\n    <!-- fix https://github.com/angular/material2/pull/7083 by setting width to 100% -->\n    <mat-form-field [floatPlaceholder]=\"to.floatPlaceholder\" [style.width]=\"'100%'\">\n      <ng-container #fieldComponent></ng-container>\n      <mat-placeholder *ngIf=\"to.placeholder\">{{ to.placeholder }}</mat-placeholder>\n      <!-- fix https://github.com/angular/material2/issues/7737 by setting id to null  -->\n      <mat-error [id]=\"null\">\n        <canhcam-validation-message [fieldForm]=\"formControl\" [field]=\"field\"></canhcam-validation-message>\n      </mat-error>\n      <!-- fix https://github.com/angular/material2/issues/7737 by setting id to null  -->\n      <mat-hint *ngIf=\"to.description\" [id]=\"null\">{{ to.description }}</mat-hint>\n    </mat-form-field>\n  `,\n  providers: [{ provide: MatFormFieldControl, useExisting: CanhcamWrapperFormField }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: FocusMonitor, },\n{type: NgZone, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'fieldComponent': [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef }, ] },],\n'formField': [{ type: ViewChild, args: [MatFormField, ] },],\n};\n}\n\nfunction CanhcamWrapperFormField_tsickle_Closure_declarations() {\n/** @type {?} */\nCanhcamWrapperFormField.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCanhcamWrapperFormField.ctorParameters;\n/** @type {?} */\nCanhcamWrapperFormField.propDecorators;\n/** @type {?} */\nCanhcamWrapperFormField.prototype.fieldComponent;\n/** @type {?} */\nCanhcamWrapperFormField.prototype.formField;\n/** @type {?} */\nCanhcamWrapperFormField.prototype.placeholder;\n/** @type {?} */\nCanhcamWrapperFormField.prototype.shouldPlaceholderFloat;\n/** @type {?} */\nCanhcamWrapperFormField.prototype.value;\n/** @type {?} */\nCanhcamWrapperFormField.prototype.empty;\n/** @type {?} */\nCanhcamWrapperFormField.prototype.stateChanges;\n/** @type {?} */\nCanhcamWrapperFormField.prototype._errorState;\n/** @type {?} */\nCanhcamWrapperFormField.prototype.focused;\n/** @type {?} */\nCanhcamWrapperFormField.prototype.destroy$;\n/** @type {?} */\nCanhcamWrapperFormField.prototype._focusMonitor;\n/** @type {?} */\nCanhcamWrapperFormField.prototype.ngZone;\n/** @type {?} */\nCanhcamWrapperFormField.prototype.renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { ConfigOption } from 'ngx-cc-template-core';\nimport {\n  CanhcamFieldInput,\n  CanhcamFieldCheckbox,\n  CanhcamFieldRadio,\n  CanhcamFieldSelect,\n  CanhcamFieldTextArea,\n  CanhcamFieldMultiCheckbox,\n} from './types/types';\nimport { CanhcamWrapperFormField } from './wrappers/wrappers';\n\nexport const /** @type {?} */ FIELD_TYPE_COMPONENTS = [\n  // types\n  CanhcamFieldInput,\n  CanhcamFieldCheckbox,\n  CanhcamFieldRadio,\n  CanhcamFieldSelect,\n  CanhcamFieldTextArea,\n  CanhcamFieldMultiCheckbox,\n\n  // wrappers\n  CanhcamWrapperFormField,\n];\n\nexport const /** @type {?} */ MATERIAL_CANHCAM_CONFIG: ConfigOption = {\n  types: [\n    {\n      name: 'input',\n      component: CanhcamFieldInput,\n      wrappers: ['form-field'],\n    },\n    {\n      name: 'textarea',\n      component: CanhcamFieldTextArea,\n      wrappers: ['form-field'],\n      defaultOptions: {\n        templateOptions: {\n          cols: 1,\n          rows: 1,\n        },\n      },\n    },\n    {\n      name: 'select',\n      component: CanhcamFieldSelect,\n      wrappers: ['form-field'],\n    },\n    {\n      name: 'radio',\n      component: CanhcamFieldRadio,\n      wrappers: ['form-field'],\n      defaultOptions: {\n        templateOptions: {\n          floatPlaceholder: 'always',\n        },\n      },\n    },\n    {\n      name: 'checkbox',\n      component: CanhcamFieldCheckbox,\n      wrappers: ['form-field'],\n      defaultOptions: {\n        templateOptions: {\n          floatPlaceholder: 'always',\n        },\n      },\n    },\n    {\n      name: 'multicheckbox',\n      component: CanhcamFieldMultiCheckbox,\n      wrappers: ['form-field'],\n      defaultOptions: {\n        templateOptions: {\n          floatPlaceholder: 'always',\n        },\n      },\n    },\n  ],\n  wrappers: [\n    { name: 'form-field', component: CanhcamWrapperFormField },\n  ],\n  manipulators: [],\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CanhcamModule } from 'ngx-cc-template-core';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\nimport { MATERIAL_CANHCAM_CONFIG, FIELD_TYPE_COMPONENTS } from './ui-material.config';\nexport class CanhcamMaterialModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: FIELD_TYPE_COMPONENTS,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatRadioModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    CanhcamModule.forRoot(MATERIAL_CANHCAM_CONFIG),\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CanhcamMaterialModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCanhcamMaterialModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCanhcamMaterialModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["CanhcamFieldCheckbox","_super","__extends","prototype","ngAfterViewInit","this","field","_control","focusMonitor","matCheckbox","_inputElement","nativeElement","FieldType","decorators","type","Component","args","selector","template","ctorParameters","propDecorators","ViewChild","MatCheckbox","CanhcamFieldMultiCheckbox","createControl","model","controlGroupConfig","templateOptions","options","reduce","previous","option","key","FormControl","undefined","FormGroup","validators","validation","asyncValidators","matCheckboxes","map","ViewChildren","CanhcamErrorStateMatcher","isErrorState","control","form","showError","CanhcamFieldInput","_this","apply","arguments","errorStateMatcher","Object","defineProperty","get","to","ngOnInit","matInput","MatInput","CanhcamFieldRadio","matRadioButtons","matRadioButton","MatRadioButton","CanhcamFieldTextArea","CanhcamFieldSelect","labelProp","valueProp","groupProp","matSelect","filteredOption","filter","label","group","push","value","selectOptions","MatSelect","CanhcamWrapperFormField","_focusMonitor","ngZone","renderer","call","stateChanges","Subject","_errorState","focused","destroy$","next","required","disabled","focus","formField","elements","element","takeUntil","monitor","subscribe","focusOrigin","run","setDescribedByIds","ids","onContainerClick","ngOnDestroy","complete","FieldWrapper","providers","provide","MatFormFieldControl","useExisting","FocusMonitor","NgZone","Renderer2","fieldComponent","read","ViewContainerRef","MatFormField","FIELD_TYPE_COMPONENTS","MATERIAL_CANHCAM_CONFIG","types","name","component","wrappers","defaultOptions","cols","rows","floatPlaceholder","manipulators","CanhcamMaterialModule","NgModule","declarations","imports","CommonModule","ReactiveFormsModule","MatFormFieldModule","MatInputModule","MatRadioModule","MatSelectModule","MatCheckboxModule","CanhcamModule","forRoot"],"mappings":"q5CAGAA,EAAA,SAAAC,GAAA,SAAAD,0DAECE,EAADF,EAAAC,GAGAD,EAAAG,UAAAC,gBAAA,WACQC,KAAKC,MAAO,eACdD,KAAKC,MAAO,cAAgBC,SAASC,cAAcH,KAAKI,YAAYC,cAAcC,mBAPxF,CAECC,EAAAA,WAQMZ,EAAPa,aACEC,KAAMC,EAAAA,UAAWC,OACjBC,SAAU,6BACVC,SAAU,oHAMXlB,EAADmB,eAAC,WAAA,UAEMnB,EAAPoB,gBAGAX,cAFkBK,KAAMO,EAAAA,UAAWL,MAAMM,EAAAA,gBCrBzC,IAAAC,EAAA,SAAAtB,GAAA,SAAAsB,0DAECrB,EAADqB,EAAAtB,GAGGsB,EAAHC,cAEA,SAFGC,EAAAnB,GAGC,IAFIoB,EAAqBpB,EAAMqB,gBAAgBC,QAAQC,OAAO,SAACC,EAAUC,GAIvE,OADAD,EAFSC,EAAOC,KAAO,IAAIC,EAAAA,YAAYR,EAAQA,EAAMM,EAAOC,KAAOE,WAC5DJ,OAKT,OAFO,IAAIK,EAAAA,UAGTT,EACApB,EAFM8B,WAAa9B,EAAM8B,WAAWC,WAAaH,UAGjD5B,EAFMgC,gBAAkBhC,EAAMgC,gBAAgBD,WAAaH,YAQjEX,EAAApB,UAAAC,gBAAA,WACQC,KAJKC,MAAO,eAKdD,KAJKC,MAAO,cAAgBC,SAASC,aAKnCH,KAJKkC,cAAcC,IAAI,SAAA/B,GAAe,OAAAA,EAAYC,cAAcC,oBArBxE,CAECC,EAAAA,WAuBMW,EAAPV,aACEC,KAAMC,EAAAA,UAAWC,OAKjBC,SAJU,kCAKVC,SAJU,qNAQXK,EAADJ,eAAC,WAAA,UAEMI,EAAPH,gBAOAmB,gBANoBzB,KAAM2B,EAAAA,aAAczB,MAAMM,EAAAA,gBCxC9C,IAAAoB,EAAA,WAIA,SAAAA,EAFsBpC,GAAAD,KAAtBC,MAAsBA,EAWtB,OAHAoC,EAAAvC,UAAAwC,aAAA,SANGC,EAAAC,GAOC,OANOxC,KAAKC,OAASD,KAAKC,MAAMwC,WAQpCJ,EAbA,GCCAK,EAAA,SAAA9C,GAAA,SAAA8C,IAAA,IAAAC,EAAA/C,EAAAgD,MAAA5C,KAAA6C,YAAA7C,YAEE2C,EAAFG,kBAEsB,IAAIT,EAAyBM,YAFlD9C,EAAD6C,EAAA9C,GAIAmD,OAAAC,eAAGN,EAAH5C,UAAA,QAAAmD,IAAA,WACI,OAAOjD,KAAKkD,GAAGzC,MAAQ,wCAK3BiC,EAAA5C,UAAAqD,SAAA,WACQnD,KAFKC,MAAO,gBAGdD,KAFKC,MAAO,cAAgBC,SAAWF,KAAKoD,aAZlD,CAEC7C,EAAAA,WAaMmC,EAAPlC,aACEC,KAAMC,EAAAA,UAAWC,OAGjBC,SAFU,0BAGVC,SAFU,2KAUX6B,EAAD5B,eAAC,WAAA,UAEM4B,EAAP3B,gBAKAqC,WAJe3C,KAAMO,EAAAA,UAAWL,MAAM0C,EAAAA,aChCtC,IAAAC,EAAA,SAAA1D,GAAA,SAAA0D,0DAECzD,EAADyD,EAAA1D,GAGA0D,EAAAxD,UAAAC,gBAAA,WACQC,KAAKC,MAAO,eACdD,KAAKC,MAAO,cAAgBC,SAASC,aACnCH,KAAKuD,gBAAgBpB,IAAI,SAAAqB,GAAkB,OAAAA,EAAenD,cAAcC,oBARhF,CAECC,EAAAA,WAUM+C,EAAP9C,aACEC,KAAMC,EAAAA,UAAWC,OACjBC,SAAU,0BACVC,SAAU,0PAUXyC,EAADxC,eAAC,WAAA,UAEMwC,EAAPvC,gBAGAwC,kBAFsB9C,KAAM2B,EAAAA,aAAczB,MAAM8C,EAAAA,mBC7BhD,IAAAC,EAAA,SAAA9D,GAAA,SAAA8D,0DAEC7D,EAAD6D,EAAA9D,KAFA,CAEC8C,GACMgB,EAAPlD,aACEC,KAAMC,EAAAA,UAAWC,OADjBC,SAEU,6BADVC,SAEU,2MAQX6C,EAAD5C,eAAC,WAAA,UCgBD,IAAA6C,EAAA,SAAA/D,GAAA,SAAA+D,IAAA,IAAAhB,EAAA/C,EAAAgD,MAAA5C,KAAA6C,YAAA7C,YAEE2C,EAAFG,kBAbsB,IAAIT,EAAyBM,YAFlD9C,EAAD8D,EAAA/D,GAqBAmD,OAAAC,eAfGW,EAeH7D,UAAA,aAAAmD,IAAA,WAf4B,OAAOjD,KAAKkD,GAAGU,WAAa,yCAmBxDb,OAAAC,eAlBGW,EAkBH7D,UAAA,aAAAmD,IAAA,WAlB4B,OAAOjD,KAAKkD,GAAGW,WAAa,yCAsBxDd,OAAAC,eArBGW,EAqBH7D,UAAA,aAAAmD,IAAA,WArB4B,OAAOjD,KAAKkD,GAAGY,WAAa,yCAyBxDH,EAAA7D,UAAAqD,SAAA,WAAA,IAAAR,EAAA3C,KACQA,KAvBKC,MAAO,gBAwBdD,KAvBKC,MAAO,cAAgBC,SAAWF,KAAK+D,WA0B9C,IAvBIxC,KAwBJvB,KAvBKkD,GAAG3B,QAAQY,IAAI,SAACT,GAwBnB,GAvBKA,EAAOiB,EAAKmB,WAEV,CAwBL,IAvBIE,EAAiCzC,EAAQ0C,OAAO,SAACD,GAwBnD,OAvBOA,EAAeE,QAAUxC,EAAOiB,EAAKmB,aAyB1CE,EAvBe,GAwBjBA,EAvBe,GAAGG,MAAMC,MAwBtBF,MAvBOxC,EAAOiB,EAAKiB,WAwBnBS,MAvBO3C,EAAOiB,EAAKkB,aA2BrBtC,EAvBQ6C,MAwBNF,MAvBOxC,EAAOiB,EAAKmB,WAwBnBK,QAvBUE,MAAO3C,EAAOiB,EAAKkB,WAAYK,MAAOxC,EAAOiB,EAAKiB,oBAShErC,EAvBQ6C,KAAK1C,KA2CjB1B,KAvBKsE,cAAgB/C,KAzBzB,CAbChB,EAAAA,WAwCMoD,EAAPnD,aACEC,KAAMC,EAAAA,UAAWC,OAwBjBC,SAvBU,2BAwBVC,SAvBU,olBAeX8C,EAAD7C,eAAC,WAAA,UAEM6C,EAAP5C,gBA0BAgD,YAzBgBtD,KAAMO,EAAAA,UAAWL,MAAM4D,EAAAA,cCzEvC,IAAAC,EAAA,SAAA5E,GA+CA,SAAA4E,EAdsBC,EAAqCC,EAAwBC,GAcnF,IAAAhC,EAGI/C,EAHJgF,KAAA5E,OAAAA,YAdsB2C,EAAtB8B,cAAsBA,EAAqC9B,EAA3D+B,OAA2DA,EAAwB/B,EAAnFgC,SAAmFA,EAxBjFhC,EAAFkC,aAEiB,IAAIC,EAAAA,QAAnBnC,EAAFoC,aAEgB,EADdpC,EAAFqC,SAEY,EAiBFrC,EAAVsC,SAAqB,IAAIH,EAAAA,iBA7BxBjF,EAAD2E,EAAA5E,GAcAmD,OAAAC,eADGwB,EACH1E,UAAA,cAAAmD,IAAA,WADqB,OAAOjD,KAAKyC,2CAKjCM,OAAAC,eAHGwB,EAGH1E,UAAA,aAAAmD,IAAA,WACI,IAHMR,EAAYzC,KAAKuB,QAAQkB,UAAUzC,MASzC,OALIyC,IAHczC,KAAK+E,cAIrB/E,KAHK+E,YAActC,EAInBzC,KAHK6E,aAAaK,QAGbzC,mCAQXM,OAAAC,eALGwB,EAKH1E,UAAA,aAAAmD,IAAA,WALoB,OAAOjD,KAAoB,6CAS/C+C,OAAAC,eARGwB,EAQH1E,UAAA,YAAAmD,IAAA,WARmB,OAAOjD,KAAKkD,GAAGiC,0CAYlCpC,OAAAC,eAXGwB,EAWH1E,UAAA,YAAAmD,IAAA,WAXmB,OAAOjD,KAAKkD,GAAGkC,0CA0BlCZ,EAAA1E,UAAAqD,SAAA,WACInD,KAlBKgF,UAAYhF,KAAKC,MAAMoF,MAmB5BrF,KAlBKsF,UAAUpF,SAAWF,KAmB1BA,KAlBKC,MAAO,cAAkBD,KAAKsF,WAwBvCd,EAAA1E,UAAAK,aAAA,SArBGoF,GAqBH,IAAA5C,EAAA3C,UArBA,IAAAuF,IAAGA,MAsBCA,EArBSpD,IAAI,SAAAqD,GAsBXC,EAAAA,UArBUb,KAsBRjC,EArBK8B,cAAciB,QAAQF,EAAS7C,EAAKgC,UAAU,GAsBnDhC,EArBKsC,UACLU,UAAU,SAAAC,GAsBNjD,EArBKqC,YAAcY,GAsBrBjD,EArBK+B,OAAOmB,IAAI,WAsBdlD,EArBKqC,UAAYY,EAsBjBjD,EArBKkC,aAAaK,cA+B9BV,EAAA1E,UAAAgG,kBAAA,SAxBGC,KA4BHvB,EAAA1E,UAAAkG,iBAAA,aAIAxB,EAAA1E,UAAAmG,YAAA,kBA5BWjG,KAAKC,MAAO,cA8BnBD,KA7BK6E,aAAaqB,WA8BlBlG,KA7BKiF,SAASiB,cAjElB,CAECC,EAAAA,cAiEM3B,EAAPhE,aACEC,KAAMC,EAAAA,UAAWC,OA8BjBC,SA7BU,iCA8BVC,SA7BU,yxBA0CVuF,YA7BcC,QAASC,EAAAA,oBAAqBC,YAAa/B,QAI1DA,EAAD1D,eAAC,WAAA,QAgCAL,KAAM+F,EAAAA,eACN/F,KAAMgG,EAAAA,SACNhG,KAAMiG,EAAAA,aA7BAlC,EAAPzD,gBAgCA4F,iBA/BqBlG,KAAMO,EAAAA,UAAWL,MAAM,kBAAqBiG,KAAMC,EAAAA,qBAgCvEvB,YA/BgB7E,KAAMO,EAAAA,UAAWL,MAAMmG,EAAAA,iBC1FhC,IAAMC,GAEXrE,EACA/C,EACA2D,EACAK,EACAD,EACAxC,EAGAsD,GAGWwC,GACXC,QAEIC,KAAM,QACNC,UAAWzE,EACX0E,UAAU,gBAGVF,KAAM,WACNC,UAAWzD,EACX0D,UAAU,cACVC,gBACE/F,iBACEgG,KAAM,EACNC,KAAM,MAKVL,KAAM,SACNC,UAAWxD,EACXyD,UAAU,gBAGVF,KAAM,QACNC,UAAW7D,EACX8D,UAAU,cACVC,gBACE/F,iBACEkG,iBAAkB,aAKtBN,KAAM,WACNC,UAAWxH,EACXyH,UAAU,cACVC,gBACE/F,iBACEkG,iBAAkB,aAKtBN,KAAM,gBACNC,UAAWjG,EACXkG,UAAU,cACVC,gBACE/F,iBACEkG,iBAAkB,aAK1BJ,WACIF,KAAM,aAAcC,UAAW3C,IAEnCiD,iBCrEFC,EAAA,kBAAA,aAAA,GAE4CA,EAA5ClH,aACEC,KAAMkH,EAAAA,SAAUhH,OADhBiH,aAEcb,EADdc,SACEC,EAAAA,aACAC,EAAAA,oBACAC,EAAAA,mBACAC,EAAAA,eACAC,EAAAA,eACAC,EAAAA,gBACAC,EAAAA,kBACAC,EAAAA,cAEcC,QAAQtB,QAKzBU,EAAD5G,eAAC,WAAA"}
